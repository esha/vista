{"name":"Vista","tagline":"Really easy, CSS-based, location-driven display control for your elements.","body":"# Vista\r\n\r\nReally easy, CSS-based, location-driven display control for your elements.\r\n\r\n## Getting Started\r\nDownload the [production version][min] or the [development version][max]. [![Build Status](https://travis-ci.org/esha/vista.png?branch=master)](https://travis-ci.org/esha/vista)  \r\n[Bower][bower]: `bower install vista`  \r\n[NPM][npm]: `npm install vista`   \r\n[Component][component]: `component install esha/vista`  \r\n\r\n[min]: https://raw.github.com/esha/vista/master/dist/vista.min.js\r\n[max]: https://raw.github.com/esha/vista/master/dist/vista.js\r\n[npm]: https://npmjs.org/package/vista\r\n[bower]: http://bower.io/\r\n[component]: http://component.io/\r\n\r\n## Documentation\r\n\r\n### Define\r\n\r\nProgramatic:  \r\n\r\n`Vista.define(name[, test])`  \r\n\r\nor declarative:  \r\n\r\n`<meta name=\"vista\" content=\"{name}={test}\">`  \r\n\r\nThe name will be used to generate the CSS display rules. The test will be turned into a regular expression that is tested against the current URL of the page. Or, if you are using `Vista.define(name, test)`, the test may be a RegExp instance or Function. If, via either definition method, the test is omitted, then the name itself will be used as the test expression (which is often sufficient). Here are some definition examples:\r\n\r\n```javascript\r\nVista.define('reports');\r\nVista.define('hasChart', /#.*(pie|bar|line)/);\r\nVista.define('special', function(url) {\r\n    // return a truthy value to pass the test or falsey to fail\r\n    return url.indexOf('special=true') > 0 || user.settings('special');\r\n});\r\n```\r\n\r\n```html\r\n<head>\r\n  <meta name=\"vista\" content=\"reports hasChart=#(pie|bar|line) query=\\?q=.+\"/>\r\n  <script src=\"../bower_components/vista/dist/vista.min.js\"></script>\r\n</head>\r\n...\r\n```\r\n\r\n### Use\r\n\r\nTo show an element only when the test passes:  \r\n\r\n`class=\"view-{name}\"`\r\n\r\nor hide an element only when a test passes:\r\n\r\n`class=\"hide-{name}\"`\r\n\r\nThe needed CSS rules are generated and applied automatically for you. There's nothing else you need to do. Just name and define a few tests, then apply a few classes. Whenever your location changes, your view will update automatically according to the tests and classes you have set. Here are some usage examples:\r\n\r\n```html\r\n<body>\r\n  <div class=\"view-reports\">\r\n    Reports would go here, of course.\r\n  </div>\r\n  <!-- hide the submenu to make more room for the chart -->\r\n  <div id=\"submenu\" class=\"hide-hasChart\">\r\n    Sub-menu is here...\r\n  </div>\r\n  ...\r\n</body>\r\n```\r\n\r\n## Release History\r\n* 2014-04-10 [v0.1.0][] (first public release)\r\n\r\n[v0.1.0]: https://github.com/esha/vista/tree/0.1.0\r\n","google":"UA-42479338-3","note":"Don't delete this file! It's used internally to help with page regeneration."}